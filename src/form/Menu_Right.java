/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package form;

import app.MessageType;
import component.popMix;
import static component.popMix.splitByteArray;
import event.EventMenuRight;
import event.PublicEvent;
import io.socket.client.Ack;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import main.Main;
import model.Model_Package_Sender;
import model.Model_Send_Message;
import model.Model_User_Account;
import service.Service;
import swing.FileChooser;

/**
 *
 * @author Admin
 */
public class Menu_Right extends javax.swing.JPanel {

    /**
     * @param fileSize the fileSize to set
     */
    public void setFileSize(long fileSize) {
        this.fileSize = fileSize;
    }

    /**
     * @return the bb
     */
    public ByteBuffer getBb() {
        return bb;
    }

    /**
     * @param bb the bb to set
     */
    public void setBb(ByteBuffer bb) {
        this.bb = bb;
    }

    /**
     * @return the DataByte
     */
    public byte[] getDataByte() {
        return DataByte;
    }

    /**
     * @param DataByte the DataByte to set
     */
    public void setDataByte(byte[] DataByte) {
        this.DataByte = DataByte;
    }
   private final String PATH_FILE = "client_data/";
    /**
     * Creates new form Menu_Left
     */
    public Menu_Right() {
        initComponents();
        
       PublicEvent.getInstance().addEventMenuRight(new EventMenuRight() {
            @Override
            public void setImageAvatar(Model_User_Account user) {
                ByteArrayInputStream bis = new ByteArrayInputStream(user.getImage());
                try {
                    BufferedImage bImage = ImageIO.read(bis);
                    ImageIcon Avatar = new ImageIcon(bImage);
                    imaAvatar.setImage(Avatar);
                    imaAvatar.repaint();
                    imaAvatar.revalidate();
                } catch (IOException ex) {
                    Logger.getLogger(Menu_Right.class.getName()).log(Level.SEVERE, null, ex);
                }
                userName.setText("Welcome "+user.getUserName()+" !");
         
                }
        });
        
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel2 = new javax.swing.JLayeredPane();
        imaAvatar = new swing.ImageAvatar();
        panel1 = new swing.Panel();
        userName = new javax.swing.JLabel();

        setBackground(new java.awt.Color(249, 249, 249));

        imaAvatar.setBorderColor(new java.awt.Color(107, 13, 158));
        imaAvatar.setBorderSize(2);
        imaAvatar.setImage(new javax.swing.ImageIcon(getClass().getResource("/icon/profile2.png"))); // NOI18N
        imaAvatar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                imaAvatarMouseClicked(evt);
            }
        });

        panel1.setBackground(new java.awt.Color(26, 1, 26));

        userName.setFont(new java.awt.Font("JetBrains Mono", 1, 14)); // NOI18N
        userName.setForeground(new java.awt.Color(255, 255, 255));
        userName.setText("Hello Phuc !");
        panel1.add(userName);
        userName.setBounds(10, 6, 140, 40);

        Panel2.setLayer(imaAvatar, javax.swing.JLayeredPane.DEFAULT_LAYER);
        Panel2.setLayer(panel1, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout Panel2Layout = new javax.swing.GroupLayout(Panel2);
        Panel2.setLayout(Panel2Layout);
        Panel2Layout.setHorizontalGroup(
            Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel2Layout.createSequentialGroup()
                .addGroup(Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Panel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(imaAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(Panel2Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        Panel2Layout.setVerticalGroup(
            Panel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel2Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(imaAvatar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(75, 75, 75)
                .addComponent(panel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(268, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(Panel2)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void imaAvatarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_imaAvatarMouseClicked
       if (evt.getClickCount() == 2 && SwingUtilities.isLeftMouseButton(evt)) {
          JFileChooser ch = new JFileChooser();
                 FileChooser preview = new FileChooser();
                 ch.setAccessory(preview);
                 ch.addPropertyChangeListener(preview);
                 ch.setFileFilter(new FileFilter(){
                     @Override
                     public boolean accept(File file) {
                            return file.isDirectory()||isImageFile(file);
                         }

                     @Override
                     public String getDescription() {
                            return "Image File";
                         }
                     
                 });
                 int option = ch.showOpenDialog(Main.getFrames()[0]);
                  if (option == JFileChooser.APPROVE_OPTION){
                        File file = ch.getSelectedFile();
                        ImageIcon image = new ImageIcon(ch.getSelectedFile().getAbsolutePath());                       
                        imaAvatar.setImage(image);
  
                        imaAvatar.repaint();
                        imaAvatar.revalidate();    
                         
                try {
                        FileInputStream in = new FileInputStream(file);
                        byte data[] = new byte[in.available()];
                        this.setDataByte(data);
                        in.read(data);
                        in.close();
                        this.setBb(ByteBuffer.wrap(data));
                        this.setFileSize(bb.limit());
                        try {
                             sendImageAvatar();
                     } catch (IOException ex) {
                     Logger.getLogger(popMix.class.getName()).log(Level.SEVERE, null, ex);
                   }
                        
        } catch (IOException e) {
            System.err.println(e);
        }
                   }
       }
        
    }//GEN-LAST:event_imaAvatarMouseClicked
    private boolean isImageFile(File file){ //kiểm tra đuôi file là định dạng image hợp lệ
            String name = file.getName().toLowerCase();
            return name.endsWith(".jpg")||name.endsWith(".png")||name.endsWith(".jpeg")||name.endsWith(".gif");
    }
    private void sendImageAvatar() throws IOException{
       Model_Package_Sender data = new Model_Package_Sender();
      
       data.setFromUserID(Service.getInstance().getUser().getUserID());
       byte[] bytes = readData();
       if (bytes != null){
           data.setData(bytes);
           data.setFinish(false);
        }else{
           data.setFinish(true);
           
        }
       //gửi đến client nhận
        Service.getInstance().getClient().emit("send_avatar", data.toJsonObject(), new Ack() {
            @Override
            public void call(Object... os) {
                if(os.length > 0){
                    boolean act = (boolean) os[0];
                    if (act) {
                        try {
                            if(!data.isFinish()){
                               sendImageAvatar();   
                            }else{
                              //send voice finish
                                 System.out.println("send finish");

                            }
                        } catch (IOException e) {
                           e.printStackTrace();
                        }
                    }
                
                }
                
            }
        });
    }
    public synchronized byte[]readData(){
        if(bb.position() != fileSize){
            int max = 1500;
            long length = bb.position() + max >= fileSize ? fileSize - bb.position() : max;
            byte[] someByte = new byte[(int) length];
            splitByteArray(someByte, bb);
            System.out.println(someByte.length);
            return someByte;
        }else{
            return null;
        }
         
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLayeredPane Panel2;
    private swing.ImageAvatar imaAvatar;
    private swing.Panel panel1;
    private javax.swing.JLabel userName;
    // End of variables declaration//GEN-END:variables
    private ByteBuffer bb;
    private byte[] DataByte;
    private long fileSize; 
}

